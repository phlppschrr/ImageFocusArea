<?php

/**
 * FieldtypeImageFocusArea for ProcessWire
 *
 * Extends InputfieldImage with the option to store focus data
 *
 * @author Philipp Schreier @phlppschrr <git@rgb10.de>
 * @copyright Copyright (c) 2013-2014, Philipp Schreier
 * @license http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License, version 2
 *
 * ProcessWire 2.x
 * Copyright (C) 2014 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 *
 */
class FieldtypeImageFocusArea extends FieldtypeImage
{

    protected $dbFields = array(); // cache

    public static function getModuleInfo()
    {
        return array(
		'title' => __('Images FocusArea Fieldtype', __FILE__),
		'summary' => __('Extends FieldtypeImage with the option to store focus data', __FILE__),
		'version' => '0.3.1',
		'author' => "Philipp Schreier (interrobang)",
		'requires' => array('ProcessWire>=2.5.6', 'InputfieldImageFocusArea'),
		'icon' => 'crosshairs'
        );
    }

    public function init()
    {
        $this->defaultInputfieldClass = 'InputfieldImageFocusArea';
        $this->addHookBefore('Pageimage::size', $this, 'hookPageimageSize');
        $this->addHookProperty("Pageimage::cssBackgroundPosition", $this, "cssBackgroundPosition");
    }


    public function hookPageimageSize(HookEvent $event)
    {
        $pageImage = $event->object;

        if ($pageImage->focus) {
            $argumentOptions = $event->arguments('options');
            $configOptions = wire('config')->imageSizerOptions;
	    if (!is_array($configOptions)) {
		$configOptions = array();
	    }

	    if (!is_array($argumentOptions)) {
		if (is_string($argumentOptions)) {
                    // optionally allow a string to be specified with crop direction, for shorter syntax
		    if (strpos($argumentOptions, ',') !== false) {
			$argumentOptions = explode(',', $argumentOptions);
		    } // 30,40
                    $argumentOptions = array('cropping' => $argumentOptions);
		} else {
		    if (is_int($argumentOptions)) {
			// optionally allow an integer to be specified with quality, for shorter syntax
			$argumentOptions = array('quality' => $argumentOptions);
		    } else {
			if (is_bool($argumentOptions)) {
			    // optionally allow a boolean to be specified with upscaling toggle on/off
			    $argumentOptions = array('upscaling' => $argumentOptions);
			}
		    }
                }
            }

            $defaultOptions = array(
		    'upscaling' => true,
		    'cropping' => true,
		    'quality' => 90,
		    'suffix' => array(), // can be array of suffixes or string of 1 suffix
		    'forceNew' => false,  // force it to create new image even if already exists
            );

            $configOptions = wire('config')->imageSizerOptions;
	    if (!is_array($configOptions)) {
		$configOptions = array();
	    }
            $mergedOptions = array_merge($defaultOptions, $configOptions, $argumentOptions);


            if (!isset($argumentOptions['cropping']) || $argumentOptions['cropping'] == '') {
                // TODO: default focusMode 'align', make this configuarable?
                $focusMode = 'align';
            } elseif (in_array($argumentOptions['cropping'], array('align', 'inside', 'outside'), true)) {
                // a valid cropping option for this field was found
                $focusMode = $argumentOptions['cropping'];
            } else {
                // use the user set cropping option, don't do anything here
                return;
            }

            $targetWidth = $event->arguments('width');
            $targetHeight = $event->arguments('height');
            $originalWidth = $pageImage->width();
            $originalHeight = $pageImage->height();
            $focusSettings = json_decode($pageImage->focus);

            $cropping = array();
            $cropping[0] = ((($focusSettings->x + $focusSettings->x2) / 2) / $originalWidth) * 100 . '%';
            $cropping[1] = ((($focusSettings->y + $focusSettings->y2) / 2) / $originalHeight) * 100 . '%';


            switch ($focusMode) {
                case 'align':
                    // use center of croppingBox for alignment
                    $argumentOptions['cropping'] = $cropping;
                    break;

                case 'inside':
                    $cropExtra = array(
			    'x' => (int) $focusSettings->x,
			    'y' => (int) $focusSettings->y,
			    'w' => (int) $focusSettings->w,
			    'h' => (int) $focusSettings->h
                    );
                    $argumentOptions['cropExtra'] = $cropExtra;
                    // use default (center) cropping on the remaining image:
                    unset($argumentOptions['cropping']);
                    break;

                case 'outside':

		    if ($targetHeight == 0) {
			$targetHeight = ($focusSettings->w / $targetWidth) * $focusSettings->h;
		    }

                    if (($targetWidth / $targetHeight) > ($focusSettings->w / $focusSettings->h)) {

                        $cropExtra = array(
				'x' => 0,
				'y' => (int) $focusSettings->y,
				'w' => (int) $originalWidth,
				'h' => (int) $focusSettings->h
                        );

                        // should we do this only if upscaling=false?
                        if ($targetHeight > $focusSettings->h) {
                            $halfMissingHeight = ($targetHeight - $focusSettings->h) / 2;

			    if ($targetHeight >= $originalHeight) {
                                // expand height to maximum
                                $cropExtra['y'] = 0;
				$cropExtra['h'] = (int) $originalHeight;
			    } elseif ($focusSettings->y - $halfMissingHeight >= 0 &&
				    $focusSettings->y2 + $halfMissingHeight < $originalHeight
			    ) {
                                // we can expand the focusArea in both directions
				$cropExtra['y'] = (int) ($focusSettings->y - $halfMissingHeight);
				$cropExtra['h'] = (int) $targetHeight;
                            } else {
                                // the focusArea can't be expanded equally to both directions
                                $cropExtra['h'] = $targetHeight;
				if ($focusSettings->y - $halfMissingHeight < 0) {
                                    $cropExtra['y'] = 0;
                                } else {
				    $cropExtra['y'] = (int) ($originalHeight - $targetHeight);
                                }

                            }
                        }
                    } else {
                        $cropExtra = array(
				'x' => (int) $focusSettings->x,
				'y' => 0,
				'w' => (int) $focusSettings->w,
				'h' => (int) $originalHeight
                        );
                        // should we do this only if upscaling=false?
                        if ($targetWidth > $focusSettings->w) {
                            $halfMissingWidth = ($targetWidth - $focusSettings->w) / 2;

			    if ($targetWidth >= $originalWidth) {
                                // expand height to maximum
                                $cropExtra['x'] = 0;
				$cropExtra['w'] = (int) $originalWidth;
			    } elseif ($focusSettings->x - $halfMissingWidth >= 0 &&
				    $focusSettings->x2 + $halfMissingWidth < $originalWidth
			    ) {
                                // we can expand the focusArea in both directions
				$cropExtra['x'] = (int) ($focusSettings->x - $halfMissingWidth);
				$cropExtra['w'] = (int) $targetWidth;
                            } else {
                                // the focusArea can't be expanded equally to both directions
                                $cropExtra['w'] = $targetWidth;
				if ($focusSettings->x - $halfMissingWidth < 0) {
                                    $cropExtra['x'] = 0;
                                } else {
				    $cropExtra['x'] = (int) ($originalWidth - $targetWidth);
                                }

                            }
                        }
                    }
                    $argumentOptions['cropExtra'] = $cropExtra;
                    $argumentOptions['cropping'] = $cropping;
                    break;
            }
            // Automatically set filename suffix to the same name as the $focusmode/cropping to avoid caching issues as discussed here:
            // https://processwire.com/talk/topic/8079-imagefocusarea/?p=78439
            if ($focusMode) {

                $suffix = $focusMode;
                $suffix .= isset($argumentOptions["suffix"]) ? '-' . $argumentOptions["suffix"] : '';    // $options is the options
                $argumentOptions['suffix'] = $suffix;

                $event->arguments('options', $argumentOptions);
            }
        }
    }

    /**
     * experimental approach to calculate a background-position for using together with background-position:cover
     *
     * @param HookEvent $event
     */
    public function cssBackgroundPosition(HookEvent $event)
    {
        $pageImage = $event->object;
        $pos = '50% 50%';
	if ($pageImage->focus) {
            $focusSettings = json_decode($pageImage->focus);
            $originalWidth = $pageImage->width();
            $originalHeight = $pageImage->height();
	    $centerX = $originalWidth / 2;
	    $centerY = $originalHeight / 2;

            // horizontal position
	    if ($focusSettings->x < $centerX && $focusSettings->x2 <= $centerX) {
                // align focusArea left
                $posX = ($focusSettings->x / $originalWidth) * 100 . '%';
	    } elseif ($focusSettings->x < $centerX && $focusSettings->x2 >= $centerX) {
                // align focusArea center
                $posX = ((($focusSettings->x + $focusSettings->x2) / 2) / $originalWidth) * 100 . '%';
            } else {
                // align focusArea right
                $posX = ($focusSettings->x2 / $originalWidth) * 100 . '%';
            }

            // vertical position
	    if ($focusSettings->y < $centerY && $focusSettings->y2 <= $centerY) {
                // align focusArea top
                $posY = ($focusSettings->y / $originalHeight) * 100 . '%';
	    } elseif ($focusSettings->y < $centerY && $focusSettings->y2 >= $centerY) {
                // align focusArea center
                $posY = ((($focusSettings->y + $focusSettings->y2) / 2) / $originalHeight) * 100 . '%';
            } else {
                // align focusArea right
                $posY = ($focusSettings->y2 / $originalHeight) * 100 . '%';
            }

            $pos = $posX . ' ' . $posY;
        }
        $event->return = $pos;
    }

    /**
     * Return the DB schema used by this field's table
     *
     */
    public function getDatabaseSchema(Field $field)
    {
        $schema = parent::getDatabaseSchema($field);
        $schema['focus'] = 'varchar(255) NOT NULL';
        $schema['keys']['focus'] = 'FULLTEXT KEY focus (focus)';
        return $schema;
    }


    /**
     * Given a raw value (value as stored in DB), return the value as it would appear in a Page object
     *
     * @param Page $page
     * @param Field $field
     * @param string|int|array $value
     *
     * @return string|int|array|object $value
     *
     */
    public function ___wakeupValue(Page $page, Field $field, $value)
    {

        $pagefiles = parent::___wakeupValue($page, $field, $value);

        foreach ($pagefiles as $pagefile) {
            foreach ($value as $v) {
		if ($v['data'] != $pagefile->basename) {
		    continue;
		}
                $pagefile->set('focus', $v['focus']);
            }
        }

        $pagefiles->resetTrackChanges(true);

        return $pagefiles;
    }

    /**
     * Given an 'awake' value, as set by wakeupValue, convert the value back to a basic type for storage in DB.
     *
     * @param Page $page
     * @param Field $field
     * @param string|int|array|object $value
     *
     * @return string|int
     *
     */
    public function ___sleepValue(Page $page, Field $field, $value)
    {
        $sleepValue = parent::___sleepValue($page, $field, $value);
	if (!$value instanceof Pagefiles) {
	    return $sleepValue;
	}

        $key = 0;
        foreach ($value as $item) {
            $sleepValue[$key]['focus'] = $value[$sleepValue[$key]['data']]->focus;
            $key++;
        }
        return $sleepValue;
    }


//    public function ___install()
//    {
//        $this->modules->get("InputfieldImageFocusArea");
//    }
}

