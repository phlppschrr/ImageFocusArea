<?php

/**
 * InputfieldImageFocusArea for ProcessWire
 *
 * Extends InputfieldImage with the option to choose the important part of the image
 *
 * @author Philipp Schreier @phlppschrr <git@rgb10.de>
 * @copyright Copyright (c) 2013-2014, Philipp Schreier
 * @license http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License, version 2
 *
 * ProcessWire 2.x
 * Copyright (C) 2014 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 *
 */
class InputfieldImageFocusArea extends InputfieldImage
{

    public static function getModuleInfo()
    {
        return array(

                'title' => __('Images FocusArea Inputfield', __FILE__),
                'summary' => __('Extends InputfieldImage with the option to choose a focusarea in the image', __FILE__),
                'version' => '0.5.0',
                'author' => "Philipp Schreier (interrobang)",
                'requires' => array('ProcessWire>=2.5.6', 'FieldtypeImageFocusArea'),
                'installs' => array('FieldtypeImageFocusArea'),
                'icon' => 'crosshairs'
        );
    }

    public function init()
    {
        parent::init();
        $this->set('cropSettings', 'thumbnail,100,100');
    }

    public function ___render()
    {
        $this->config->scripts->add($this->config->urls->InputfieldImageFocusArea . "Jcrop/js/jquery.Jcrop.min.js");
        $this->config->styles->add($this->config->urls->InputfieldImageFocusArea . "Jcrop/css/jquery.Jcrop.min.css");
        return parent::___render();
    }

    protected function renderItemDescriptionField(Pagefile $pageImage, $id, $n)
    {
        $out = parent::renderItemDescriptionField($pageImage, $id, $n);

        $subfieldName = 'focus';
        $for = $subfieldName . "_" . $id;
        $data_inputtarget = "data-inputtarget='$for' ";

        $out .= "<div class='InputfieldImageFocusArea_links'>";

        // =============================================================================
        // json storage field
        // =============================================================================
        $value = $this->sanitizer->entities($pageImage->$subfieldName);
        $out .= "<input type='hidden' name='$for' id='$for' value='$value' />";

        $allFocusSettings = json_decode($pageImage->$subfieldName);
//        if (isset($argumentOptions['namedCrop'])) {
//            $focusName = $argumentOptions['namedCrop'];
//        } else {
//            $focusName = 'focus';
//        }
//        $focusSettings = $allFocusSettings->$focusName;

        // =============================================================================
        // Preview Image
        // =============================================================================
        /** @var Pageimage $previewImage */


        // =============================================================================
        // Focusarea Edit Links
        // =============================================================================
        $focusButtonLabel = '';
        $focusSettings = false;
        if (isset($allFocusSettings->focus)) {
            $focusSettings = $allFocusSettings->focus;
        }

//        if ($focusSettings) {
//            $focusButtonLabel = __('Edit/Remove Image Focusarea');
//        } else {
//            $focusButtonLabel = __('Add Image Focusarea');
//        }
        $focusButtonLabel = __('Focusarea');
        $out .= "<a href='#' class='button-setfocus' $data_inputtarget data-key='focus' title='$focusButtonLabel'>" . $this->getCropPreviewMarkup($pageImage, $focusSettings) . "<i class='fa fa-crosshairs'></i> <span class='ui-button-text'>
$focusButtonLabel</span></a>";


        // =============================================================================
        // Crop Edit Links
        // =============================================================================
        $rawCropsSettings = $this->cropSettings;
        if (strlen($rawCropsSettings) > 3) {
            $page = $this->pages->get((int) $this->input->get->id);
            if (!$page->id || !$page->editable()) {
                throw new WirePermissionException();
            }

            $rawCropSettingsArray = explode("\n", strtolower($rawCropsSettings));

            foreach ($rawCropSettingsArray as $key => $rawCropSetting) {
                $rawCropSetting = trim($rawCropSetting);
                $cropItemSettings = explode(',', $rawCropSetting);

                $cropName = $cropItemSettings[0];
                $focusButtonLabel = $cropName;

                if (count($cropItemSettings) > 3) {
                    // check if cropItem can be used on current template
                    $cropItemTemplates = array_slice($cropItemSettings, 3);
                    if (!in_array($page->template, $cropItemTemplates)) {
                        continue;
                    }
                }
                $data_ratio = '';
                if ((int) $cropItemSettings[1] > 0 && (int) $cropItemSettings[2] > 0) {
                    $data_ratio = "data-ratio='" . (string) ((int) $cropItemSettings[1] / (int) $cropItemSettings[2]) . "'";
                }
                $focusSettings = false;
                if (isset($allFocusSettings->$cropName)) {
                    $focusSettings = $allFocusSettings->$cropName;
                }
                $out .= "<a href='#' class='button-setfocus button-setfocus--crop' $data_inputtarget $data_ratio data-key='$cropName' title='$focusButtonLabel'>" . $this->getCropPreviewMarkup(
                                $pageImage,
                                $focusSettings
                        ) . "<i class='fa fa-crop'></i>
 <span class='ui-button-text'>$focusButtonLabel</span></a>";
            }
        }
        // close .InputfieldImageFocusArea_links
        $out .= '</div>';

        return $out;
    }


    protected function getCropPreviewMarkup(Pageimage $pageImage, $focusSettings)
    {

        $previewImage = $pageImage->size(300, 200, array('upscaling' => false, 'cropping' => false, 'forceNew' => false));
        $imgWidth = $previewImage->width;
        $imgHeight = $previewImage->height;
        $originalWidth = $previewImage->original->width;
        $originalHeight = $previewImage->original->height;

        $previewMarkup = "<div class='InputfieldImageFocusArea_preview'>";
        $previewMarkup .= "<img src='{$previewImage->url}' width='$imgWidth' height='$imgHeight' />";
        if ($focusSettings) {
            $left = ($focusSettings->x / $originalWidth) * 100 . '%';
            $top = ($focusSettings->y / $originalHeight) * 100 . '%';
            $w = ($focusSettings->w / $originalWidth) * 100 . '%';
            $h = ($focusSettings->h / $originalHeight) * 100 . '%';
            $focusMarkerMarkup = "<div class='InputfieldImageFocusArea_marker' style='left: $left; top:$top; width: $w; height: $h'></div>";
            $previewMarkup .= $focusMarkerMarkup;
        }
        $previewMarkup .= "</div>";
//        return '';
        return $previewMarkup;
    }

    public function ___getConfigInputfields()
    {

        $inputfields = parent::___getConfigInputfields();


        $field = $this->modules->get("InputfieldTextarea");
        $field->attr('name', 'cropSettings');
        $field->attr('value', (string) $this->cropSettings);
        $field->label = $this->_("Thumbnail Settings");
        $field->description = $this->_(
                'Enter all crop dimensions, one on each line in this format: name,width,height. Few examples: "thumbnail,200,200" or "portrait,200,600". Optionally, you can limit the visibility of the thumbnails to the selected template, giving as the last parameter, the name of the template. Example: "thumbnail,200,200,base-page,home"'
        );

        //$fieldset->add($field);

        $inputfields->add($field);

        return $inputfields;
    }


    protected function ___processInputFile(WireInputData $input, Pagefile $pagefile, $n)
    {
        $changed = parent::___processInputFile($input, $pagefile, $n);
        $id = $this->name . '_' . $pagefile->hash;

        $name = 'focus';
        $for = $name . "_" . $id;
        $value = $input->$for;

        $value = $this->sanitizer->text($value);

        if ($pagefile->$name != $value) {
            $pagefile->set($name, $value);
            $changed = true;
        }

        return $changed;
    }

}

