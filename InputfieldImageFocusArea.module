<?php

/**
 * InputfieldImageFocusArea for ProcessWire
 *
 * Extends InputfieldImage with the option to choose the important part of the image
 *
 * @author Philipp Schreier @phlppschrr <git@rgb10.de>
 * @copyright Copyright (c) 2013-2014, Philipp Schreier
 * @license http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License, version 2
 *
 * ProcessWire 2.x
 * Copyright (C) 2014 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 *
 */
class InputfieldImageFocusArea extends InputfieldImage
{

    public static function getModuleInfo()
    {
        return array(

            'title' => __('Images FocusArea Inputfield', __FILE__),
            'summary' => __('Extends InputfieldImage with the option to choose a focusarea in the image', __FILE__),
            'version' => '0.6.0',
            'author' => "Philipp Schreier (interrobang)",
            'requires' => array('ProcessWire>=2.5.6', 'FieldtypeImageFocusArea'),
            'installs' => array('FieldtypeImageFocusArea'),
            'icon' => 'crosshairs'
        );
    }


    public function init()
    {
        parent::init();
        $this->set('cropSettings', '');
    }


    public function ___render()
    {
        $this->config->scripts->add($this->config->urls->InputfieldImageFocusArea . "Jcrop/js/jquery.Jcrop.min.js");
        $this->config->styles->add($this->config->urls->InputfieldImageFocusArea . "Jcrop/css/jquery.Jcrop.min.css");
        return parent::___render();
    }


    protected function renderItemDescriptionField(Pagefile $pageImage, $id, $n)
    {
        $out = parent::renderItemDescriptionField($pageImage, $id, $n);

        $for = "focus_" . $id;
        $data_inputtarget = "data-inputtarget='$for' ";

        $out .= "<div class='InputfieldImageFocusArea_links'>";

        // =============================================================================
        // json storage field
        // =============================================================================
        $allFocusSettings = json_decode($pageImage->focus, true);
        $value = $this->sanitizer->entities($pageImage->focus);
        if (json_last_error() !== JSON_ERROR_NONE){
            $this->warning('Error reading JSON, ignoring saved focus/cropping data');
            $value = '';
            $allFocusSettings = array();
        }
        $out .= "<input type='hidden' name='$for' id='$for' value='$value' />";


        // =============================================================================
        // Focusarea Edit Links
        // =============================================================================
        $focusButtonLabel = '';
        $focusSettings = false;
        if (isset($allFocusSettings['focus'])) {
            $focusSettings = $allFocusSettings['focus'];
        }

        $focusButtonLabel = __('Focusarea');
        $out .= "<a href='#' class='button-setfocus' $data_inputtarget data-key='focus' title='$focusButtonLabel'>"
             . $this->getCropPreviewMarkup($pageImage, $focusSettings)
             . "<i class='fa fa-crosshairs'></i>"
             . "<span class='ui-button-text'>$focusButtonLabel</span></a>";


        // =============================================================================
        // Crop Edit Links
        // =============================================================================
        $rawCropsSettings = $this->cropSettings;
        if (strlen($rawCropsSettings) > 3) {
            $page = $this->pages->get((int)$this->input->get->id);
            if (!$page->id || !$page->editable()) {
                throw new WirePermissionException();
            }

            $rawCropSettingsArray = explode("\n", strtolower($rawCropsSettings));

            foreach ($rawCropSettingsArray as $key => $rawCropSetting) {
                $rawCropSetting = trim($rawCropSetting);
                $cropItemSettings = explode(',', $rawCropSetting);

                $cropName = trim($cropItemSettings[0]);
                $focusButtonLabel = $cropName;

                // Use template field context to override cropSettings for specific templates, PW 2.5.7+

//                if (count($cropItemSettings) > 3) {
//                    // check if cropItem can be used on current template
//                    $cropItemTemplates = array_slice($cropItemSettings, 3);
//                    if (!in_array($page->template, $cropItemTemplates)) {
//                        continue;
//                    }
//                }

                $data_ratio = '';
                if ((int)$cropItemSettings[1] > 0 || (int)$cropItemSettings[2] > 0) {
                    $data_ratio = "data-ratiowidth='" . (int)$cropItemSettings[1] . "' data-ratioheight='" . (int)$cropItemSettings[2] . "'";
                }
                $focusSettings = false;
                if (isset($allFocusSettings[$cropName])) {
                    $focusSettings = $allFocusSettings[$cropName];
                }
                $out .= "<a href='#' class='button-setfocus button-setfocus--crop' $data_inputtarget $data_ratio data-key='$cropName' title='$focusButtonLabel'>"
                     . $this->getCropPreviewMarkup($pageImage, $focusSettings)
                     . "<i class='fa fa-crop'></i>"
                     . "<span class='ui-button-text'>$focusButtonLabel</span></a>";
            }
        }
        // close .InputfieldImageFocusArea_links
        $out .= '</div>';

        return $out;
    }


    public function getCropPreviewMarkup(Pageimage $pageImage, $focusSettings)
    {
        $previewImage = $pageImage->size(300, 200,
            array(
                'upscaling' => false,
                'cropping' => false
            ));
        $imgWidth = $previewImage->width;
        $imgHeight = $previewImage->height;
        $originalWidth = $previewImage->original->width;
        $originalHeight = $previewImage->original->height;

        $previewMarkup = "<div class='InputfieldImageFocusArea_preview'>";
        $previewMarkup .= "<img src='{$previewImage->url}' width='$imgWidth' height='$imgHeight' />";

        if ($focusSettings) {
            $left = ($focusSettings['x'] / $originalWidth) * 100 . '%';
            $top = ($focusSettings['y'] / $originalHeight) * 100 . '%';
            $w = ($focusSettings['w'] / $originalWidth) * 100 . '%';
            $h = ($focusSettings['h'] / $originalHeight) * 100 . '%';
            $focusMarkerMarkup = "<div class='InputfieldImageFocusArea_marker' style='left: $left; top:$top; width: $w; height: $h'></div>";
            $previewMarkup .= $focusMarkerMarkup;
        }

        $previewMarkup .= "</div>";

        return $previewMarkup;
    }


    /**
     * Get any custom configuration fields for this Inputfield
     *
     * Intended to be extended by each Inputfield as needed to add more config options.
     *
     * NOTE: Inputfields with a name that starts with an underscore, i.e. "_myname" are assumed to be for runtime
     * use and are NOT stored in the database.
     *
     * @return InputfieldWrapper
     *
     */
    public function ___getConfigInputfields()
    {
        $inputfields = parent::___getConfigInputfields();

        $field = $this->modules->get("InputfieldTextarea");
        $field->attr('name', 'cropSettings');
        $field->attr('value', $this->sanitizer->textarea($this->cropSettings));
        $field->label = $this->_("Thumbnail Settings");
        $field->description = $this->_(
            'Enter all crop dimensions, one on each line in this format: name,width,height. Few examples: "thumb,200,200" or "portrait,200,600". If you do not want a fixed aspectratio you can set width and/or height to "0". For Example: "thumb,200,0"'
        );

        $inputfields->add($field);

        return $inputfields;
    }

    /**
     * Return a list of Inputfield names from getConfigInputfields() that are allowed in fieldgroup/template context
     *
     * @param Field $field
     * @return array of Inputfield names
     *
     */
    public function ___getConfigAllowContext($field)
    {
        $contextFields = parent::___getConfigAllowContext($field);
        $contextFields[] = 'cropSettings';
        return $contextFields;
    }


    protected function ___processInputFile(WireInputData $input, Pagefile $pagefile, $n)
    {
        $changed = parent::___processInputFile($input, $pagefile, $n);
        $id = $this->name . '_' . $pagefile->hash;

        $name = 'focus';
        $for = $name . "_" . $id;
        $value = $input->$for;

        $value = $this->sanitizer->textarea($value);

        if ($pagefile->$name != $value) {
            $pagefile->set($name, $value);
            $changed = true;
        }

        return $changed;
    }

}

